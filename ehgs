remove the transparent white box and transparent black box behind the player, move the controls to the actual video, make the controls white and make them hide if not hovered on the video itself, grow if they are hovered on, css:/* === VIDEO PAGE STYLES === */
.container-vid {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh; /* always full height center */
  padding: 20px;
}

/* Player card stays centered */
.player.card {
  width: 100%;
  max-width: 33vw;        /* cannot exceed 1/3 viewport width */
  min-height: 50vh;       /* ensures video is at least half screen height */
  max-height: 90vh;       /* ensures video never overflows */
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background: rgba(0,0,0,0.5);
  border-radius: 12px;
  padding: 20px;
}

/* Video element scaling */
.player video {
  width: 100%;
  height: auto;
  max-height: 80vh;       /* keep inside viewport */
  border-radius: 8px;
  display: block;
  margin: 0 auto;
}

/* Controls */
.controls {
  width: 100%;
  margin-top: 15px;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 15px;
}

.timebar {
  width: 100%;
  display: flex;
  align-items: center;
  gap: 10px;
  font-size: 14px;
}

.timebar .seek_slider {
  flex: 1;
}

/* Buttons */
.buttons {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 30px;
}

.buttons i {
  color: #FFA500;
  cursor: pointer;
  transition: transform 0.2s, opacity 0.2s;
  opacity: 0.8;
}

.buttons i:hover {
  opacity: 1;
  transform: scale(1.2);
}

/* Volume */
.volume {
  display: flex;
  align-items: center;
  gap: 10px;
  width: 80%;
}

.volume input[type="range"] {
  flex: 1;
} ... js:/* DOM references */
const video = document.getElementById("curr_video");

const playpause_btn = document.querySelector(".playpause-track");
const next_btn = document.querySelector(".next-track");
const prev_btn = document.querySelector(".prev-track");

const seek_slider = document.querySelector(".seek_slider");
const volume_slider = document.querySelector(".volume_slider");
const curr_time = document.querySelector(".current-time");
const total_duration = document.querySelector(".total-duration");

let isPlaying = false;

/* Reset */
function reset() {
  curr_time.textContent = "00:00";
  total_duration.textContent = "00:00";
  seek_slider.value = 0;
}

/* Play / Pause */
function playVideo() {
  video.play();
  isPlaying = true;
  playpause_btn.innerHTML = '<i class="fa fa-pause fa-3x"></i>';
}

function pauseVideo() {
  video.pause();
  isPlaying = false;
  playpause_btn.innerHTML = '<i class="fa fa-play fa-3x"></i>';
}

function playpauseVideo() {
  isPlaying ? pauseVideo() : playVideo();
}

/* Seek */
function seekTo() {
  const seekto = video.duration * (seek_slider.value / 100);
  video.currentTime = seekto;
}

/* Volume */
function setVolume() {
  video.volume = volume_slider.value / 100;
}

/* Update time */
function setUpdate() {
  if (isNaN(video.duration)) return;
  const seekPosition = (video.currentTime / video.duration) * 100;
  seek_slider.value = seekPosition;

  curr_time.textContent = formatTime(video.currentTime);
  total_duration.textContent = formatTime(video.duration);
}

/* Format mm:ss */
function formatTime(secs) {
  const minutes = Math.floor(secs / 60);
  const seconds = Math.floor(secs % 60);
  return `${minutes}:${seconds < 10 ? "0" : ""}${seconds}`;
}

/* Event listeners */
playpause_btn.addEventListener("click", playpauseVideo);

next_btn.addEventListener("click", () => {
  video.currentTime = Math.min(video.currentTime + 10, video.duration);
});

prev_btn.addEventListener("click", () => {
  video.currentTime = Math.max(video.currentTime - 10, 0);
});

seek_slider.addEventListener("input", seekTo);
volume_slider.addEventListener("input", setVolume);

video.addEventListener("timeupdate", setUpdate);
video.addEventListener("ended", pauseVideo);

/* Init */
reset(); ... html:<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Bloopers Video Player</title>

  <!-- Main site styles -->
  <link rel="stylesheet" href="index.css"/>

  <!-- Video-only styles -->
  <link rel="stylesheet" href="css/video.css"/>

  <!-- Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css"/>
</head>
<body>
  <div class="container-vid">
    <div class="player card">
      <div class="wrapper">
        
        <!-- Video element -->
        <video id="curr_video" preload="metadata">
          <source src="videos/ssstik.io_@drumboii_real_1758924023510.mp4" type="video/mp4"/>
          Your browser does not support HTML5 video.
        </video>

        <!-- Controls -->
        <div class="controls">
          <div class="timebar">
            <div class="current-time">00:00</div>
            <input type="range" min="0" max="100" value="0" class="seek_slider"/>
            <div class="total-duration">00:00</div>
          </div>

          <div class="buttons">
            <div class="prev-track" title="Back 10s">
              <i class="fa fa-undo fa-2x"></i>
            </div>
            <div class="playpause-track" title="Play/Pause">
              <i class="fa fa-play fa-3x"></i>
            </div>
            <div class="next-track" title="Forward 10s">
              <i class="fa fa-redo fa-2x"></i>
            </div>
          </div>

          <div class="volume">
            <i class="fa fa-volume-down"></i>
            <input type="range" min="0" max="100" value="99" class="volume_slider"/>
            <i class="fa fa-volume-up"></i>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="js/video-player.js" defer></script>
</body>
</html>
